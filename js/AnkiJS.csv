"document.getElementById()"," <p>JavaScript and its many frameworks such as <a href='https://bytescout.com/blog/jquery-shortcuts-a-few-of-the-best.html' target='_blank' rel='noopener'>JQuery</a> let you process code based on a particular HTML name or class. While this works.. it can slow your script as it must go through the entire script to find the right tag. You can speed up this search through your application’s document object model (DOM) by using element ID.<br><a name='2'></a></p>"
" Basic Input / Output"," <p>Except for the most basic scripts.. all applications require some user interaction. With JavaScript.. this function comes in the form of the alert() and prompt() commands. Alert sends info to the user through a dialogue box.. while the prompt asks for a response.</p><h3>Syntax</h3> <p><code><strong>alert('message');</strong></code></p> <p><code><strong>stringVar = prompt('message')</strong></code><br> <a name='3'></a></p>"
" SetTimeout()"," <p>SetTimeout lets you automatically run commands at a specific time without user input. This simple JS command just requires the command you want to run and when you want to run it.</p><h3>Syntax</h3> <p><code><strong>setTimeout(command.. time);</strong></code></p> <p>You must express the time in milliseconds.. but you can use any JavaScript statement as the command. For example.. the following code runs the myfunction command after 5 seconds.</p> <h3>Example</h3> <p><code><strong>setTimeout(myfunction.. 5000);</strong></code><br> <a name='4'></a></p>"
" Setinterval()"," <p>You can also repeatedly run JavaScript commands using the setinterval command. Setinterval is great when you need your application to refresh its data from the database.</p><h3>Syntax</h3> <p><code><strong>setInterval(command.. time);</strong></code><br> <a name='5'></a></p>"
" ClearTimeout() and ClearInterval()"," <p><strong>If you will use either settimeout or setinterval.. you will want to use their associated clear command as well.</strong> ClearTimeout and ClearInterval take the variable name for a set command and then delete it from memory.</p><h3>Example</h3> <p><code><strong>$timer = setInterval(command.. 5000);</strong></code><br> <code><strong>clearInterval($timer);</strong></code><br> <a name='6'></a></p>"
" Var"," <p><strong>It’s a simple command.. but most JavaScript developers forget to use it. Var formally creates your variables.</strong> While you can create and use JavaScript variables without it.. the language treats these variables as a global variable. This is fine if that is your intention.. but risks overriding something if you are not careful. It also uses more resources. You can improve the performance of your app just by formally declaring your variables.<br><a name='7'></a></p>"
" Self-calling Function"," <p>A self-calling function is a JavaScript command that runs as soon as you create it. These commands are also called Self-Invoked Anonymous Functions or Immediately Invoked Function Expressions (IIFE).</p><h3>Example</h3> <p><code><strong>(function(){&nbsp;&nbsp;&nbsp; // some private code that will be executed automatically})</strong></code><br> <a name='8'></a></p>"
" Math.random()"," <p>The <strong><code>Math.random</code></strong> command generates random numbers.<br><a name='9'></a></p>"
" Map()"," <p>The <strong><code>map() command</code></strong> lets you loop through an array or collection. This is perfect for running the same command over a large array.<br><a name='10'></a></p>"
" Debounce()"," <p>Debounce limits how often a JS command will run. Functionally.. it is the opposite of timeout. It is especially good if some repeated user interaction would slow down performance or cause other problems.<br><a name='11'></a></p>"
" Poll()"," <p>Many JavaScript commands do not warn the system when they finish running. Sometimes.. you must manually poll to see if something stops or if there is an exception. It is a complex command to use though.. but it is worth the effort.<br><a name='12'></a></p>"
" Once()"," <p>Once lets you run a command once and only once during the execution of an application. You mostly find these commands in event listeners.<br><a name='13'></a></p>"
" GetAbsoluteUrl()"," <p>This JavaScript command gets you the actual URL of a web address.. especially if it is contained in a string. It just takes the URL string and it gives back the address with all the queries and other elements removed.</p><h3>Example</h3> <p><code><strong>var getAbsoluteUrl = (function() {var a;return function(url) {if(!a) a = document.createElement('a');a.href = url;return a.href;};})();// UsagegetAbsoluteUrl('/something'); //</strong></code><br> <a name='14'></a></p>"
" String.replace()"," <p>The replace command lets you change the text in a string. <strong>It searches the string for the text you want to be replaced and switches it out for what you want.</strong> The search pattern can be either a simple text string or a regular expression. The command then returns this new string.. leaving the original string unmodified.<br><a name='15'></a></p>"
" Array.Push()"," <p>Push adds items to arrays. It changes the array directly without returning anything.<br><a name='16'></a></p>"
" Array.filter()"," <p>The filter takes items out of an array based on some criteria and then creates a new array with just those items.<br><a name='17'></a></p>"
" Array.reduce()"," <p>Reduce is an often-overlooked array command. It converts the items of an array into a single item. Perfect for calculations.. it can return any type of variable.<br><a name='18'></a></p>"
" String.toLowerCase()"," <p>ToLowerCase sounds like what it does. It converts a string to all lower-case letters. This popular command lets you convert data into standard URL formats that most web browsers will understand.<br><a name='19'></a></p>"
" IsNative()"," <p>This function indicates if a given browser feature is native to a particular browser or if it comes from a third-party app.<br><a name='20'></a></p>"
" String.substr()"," <p>Substr dives into a string and returns text based on the provided criteria. You must specify where you want it to start.. and how many characters you want the command to retrieve.</p><p>Some of these twenty commands are built into the language. Others are useful snippets of code that the JavaScript developer community saw fit to create. Either way.. all JavaScript commands will help you improve your knowledge and skills.<br><a name='21'></a></p>"
" debug(message)"," <p>This is one of the most important Javascript commands. This command is used to send messages to the console window.</p><h3>Example</h3><p><strong><code>console.debug('log message');</code></strong></p><p>The above command is sending the log message to the console window. This command is equal to console.log command. Objects that are transferred by applying the command are transformed into a string value. This is mostly used in Microsoft Visual studio as a console log command.<br><a name='22'></a></p>"
" string.toLowerCase()"," <p>The <strong><code>toLowerCase() function</code></strong> does precisely what you believe it would. It just delivers a new string that has been transformed to all lower cases from the old string. The initial string is not modified. For example.. if your text is in the capital and now if you want it in the lower case then this function helps you to get that output.<br><a name='23'></a></p>"
" Function Retur"," <p>When JavaScript arrives at a return statement.. the function will terminate performing. If the function was requested from a Javascript statement then JavaScript will “return” to perform the code after the beginning statement. Functions usually calculate a return value. You can always reuse this code. The return value is “reflected” back to the “visitor”.</p><h3>Example</h3><p><strong><code>var a = newFunction(6.. 4);</code>&nbsp;</strong>&nbsp; // called Function.. the return value will&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; be in a<br><strong><code>function newFunction(x.. y) {</code></strong><br><strong><code>&nbsp; return x * y;&nbsp;&nbsp;</code></strong>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;// Function returns the multiplication of x and y<br><strong><code>}</code></strong></p><p><em>The output of the above function is 24&nbsp;&nbsp;&nbsp;</em><br><a name='24'></a></p>"
" floor()"," <p>The floor is one of the most important javascript methods. The floor() method spins a number to the most next integer and delivers the result. If the given parameter is an integer.. the argument will not be rounded. For example.. the below command will round the entered argument to the nearest integer.</p><h3>Example</h3><p><strong><code>Math.floor(1.6);</code></strong><br><a name='25'></a></p>"
" For loop"," <p>JavaScript contains loop commands like Java and C.If you want to execute some code repeatedly then the For loop command is crucial. The syntax of this command is as follows.</p><h3>Syntax</h3><p><strong><code>for(initialize; condition; iteration)</code></strong><br><strong><code>{</code></strong><br><strong><code>&nbsp;&nbsp;&nbsp; // Code</code></strong><br><strong><code>}</code></strong><br><code><strong>for (var a = 0; i &lt; 10; a++) { console.log(a); }</strong></code></p><p><em>The for the loop needs the three sections. The first one is Initializer which initializes a variable.. to begin with. The second section is a condition where you define a situation that must decide to be true for the next repetition.</em> The third segment is Iteration which is used to increase or decrease the counter.<br><a name='26'></a></p>"
" The If-Else"," <p><em>The if/else command performs a section of code if a defined condition is valid. If the condition is invalid.. another section of the code can be performed.</em> The if/else command is a piece of JavaScript’s “Conditional” commands.. which are utilized to execute various activities based on various circumstances. For example.. the following command is displaying the use of the command.</p><h3>Example</h3><p><strong><code>var time = new Date().getHours();</code></strong><br><strong><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(hours&lt;12)</code></strong><br><strong><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.write('Hello.. We will meet tomorrow morning&lt;br /&gt;');</code></strong><br><strong><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</code></strong><br><strong><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.write('Hello.. We will meet tomorrow afternoon&lt;br /&gt;')</code></strong></p><p><strong>The above example shows that the conditional command is used to determine the course of the execution on various conditions.</strong> As mentioned earlier.. if a condition is valid.. you can complete one step and if the condition is invalid.. you can complete a different step.<br><a name='27'></a></p>"
" constructor()"," <p>These JavaScript Commands are useful for creating special methods. Now.. if you want to make a special method for creating and initializing an object created within a class the constructor() can be used. You just have to mention it in the following format.</p><h3>Example</h3> <p><code><b>constructor([arguments]) { ... }</b></code><br> <a name='28'></a></p>"
" Math Object"," <p>These best JS Commands are also known as objects which are essential for making a dynamic application. The Math object allows users to complete mathematical assignments. Math is not a constructor. All features/techniques of Math can be summoned by applying Math as an object.. without building it.</p><h3>Example</h3> <p><code><b>Math.sqrt(25);</b></code><br> <a name='29'></a></p>"
" JS Date"," <p>The date is an important member of the JavaScript Command List. The Date object is applied to operate with dates and times. These objects are constructed with a new Date().</p><h3>Example</h3> <p><code><b>var a = new Date();</b></code><br> <a name='30'></a></p>"
" Error Object"," <p>The Error object gives an error message when an error happens. Out of all the JavaScript List of Commands.. the Error object is crucial for identifying and presenting error messages.</p><h3>Example</h3> <p><strong><code>try {<br> myalert('Hello');<br> }</code></strong><br> <strong><code>catch(err) {</code></strong><br> <strong><code>&nbsp;&nbsp;document.getElementById('task').innerHTML =</code></strong><br> <strong><code>&nbsp;&nbsp;err.name + '&lt;br&gt;' + err.message;</code></strong><br> <strong><code>}</code></strong><br> <a name='31'></a></p>"
" toExponential()"," <p>These JavaScript commands are part of the numerical methods and properties. This toExponential() method gives a string.. with a number wheeled and formulated using exponential representation. For example.. a parameter specifies the number of characters following the decimal point.</p><h3>Example</h3> <p><code><b>var y = 9.656;</b></code><br> <code><b>y.toExponential(2); &nbsp; will return 9.66e+0</b></code><br> <a name='32'></a></p>"
" toFixed()"," <p><span style='font-weight: 400;'>with JavaScript.. methods.. and features are also possible to use for fundamental values. This is because JavaScript uses primitive values as objects when executing systems and characteristics. toFixed() passes a string.. with the number addressed with a detailed number of decimals.</span></p><h3>Example</h3> <p><code><b>var y = 9.656;</b></code><br> <code><b>y.toFixed(6); will return 9.656000</b></code><br> <a name='33'></a></p>"
" toPrecision()"," <p>The toPrecision() gives a string. It returns a number addressed with a detailed length. In JavaScript.. toPrecision() is applied to change a number to accuracy like spinning the result where required and deliver its content as a string. It must be called through a special case of the Number class.</p><h3>Example</h3> <p><code><b>var y = 9.656;</b></code><br> <code><b>y.toPrecision(2) will return 9.7</b></code><br> <a name='34'></a></p>"
" valueOf()"," <p><span style='font-weight: 400;'>The valueOf method delivers the appropriate Number Object containing the value of the argument declared. The parameter can be a primitive data type. This is static. The method can accept two parameters.</span></p><h3>Example</h3> <p><code><b>var y = 125</b></code><br> <code><b>;</b></code><br> <code><b>y.valueOf(); will return 125 from variable&nbsp;</b></code><br> <code><b>y (123).valueOf(); will returns 125 from literal 125</b></code><br> <a name='35'></a></p>"
" parseInt()"," <p>The parseInt() parses a string parameter and gives an integer of the stipulated radix. You can also say that it returns the base in analytical number systems. In this.. the spaces are allowed and only the first number is passed.</p><h3>Example</h3> <p><code><b>parseInt('20');&nbsp; will return 20</b></code><br> <a name='36'></a></p>"
" normalize()"," <p>The normalize is a browser-based Javascript method. It merges neighboring text nodes into a separate text node and eliminates void text nodes. It has a return value and in Internet Explorer.. this method does not remove empty text nodes.</p><p><em>This method is also used to obtain the Unicode Normalization Form also called a code point of the string. It creates unique numerical value and is one of the most important members of the String family.</em></p> <h3>Syntax</h3> <p><strong><code>string.normalize()</code></strong></p> <h3>Example</h3> <p><code><strong>var a = 'Hello World'; </strong></code><br> <strong><code>b= a.normalize('NFC')</code></strong><br> <a name='37'></a></p>"
" slice(start..end)"," <p>arr.slice() is a javascript function that returns a new array holding a part of the array on which it is executed. For example.. the primary array remains constant. This function accepts two parameters and it is an inbuilt function in Javascript. The parameters are the start index and the end index.</p><p><em>This function only copies the array and creates a new one. It does not change the original array. The following example is displaying the use of the slice function. It is only copying and creating a new array.</em></p> <h3>Example</h3> <p><strong><code>var myarr = [20..30..40..50..60..70];</code></strong><br> <strong><code>var my_new_arr = arr.slice();</code></strong><br> <strong><code>print(myarr);</code></strong><br> <strong><code>print(my_new_arr);</code></strong></p> <h3>Output</h3> <p><strong><code>[20..30..40..50..60..70]</code></strong><br> <strong><code>[20..30..40..50..60..70]</code></strong><br> <a name='38'></a></p>"
" Epsilon"," <p>EPSILON is one of the static properties of javascript that is applied to give the smallest positive number nearing zero (ie: a positive tiny number). EPSILON is a number object property and can be called through the Number object.</p><h3>Syntax</h3> <p><strong><code>Number.EPSILON;</code></strong></p> <h3>Example</h3> <p><strong><code>console.log(Number.EPSILON);</code></strong><br> <strong><code>Output: 2.220446049250313e-16</code></strong><br> <a name='39'></a></p>"
" toJSON()"," <p>The JSON is a JavaScript Object Notation. This function is a common setup to express conditions and objects. The JSON function can be used for data exchange when the client utilizes JavaScript and the server is based on Ruby/PHP. It gives two methods JSON.stringify and JSON.parse. The JSON.strigify is used to convert objects into JSON and the JSON.parse is used to convert JSON back into an object.<br><a name='40'></a></p>"
" toISOString()"," <p>The toISOString() is a function of the date object in Javascript. This function gives the obvious extensive ISO format of the date. It is one of the most important functions of data objects. To use this function it is necessary to create a Date object. After creating the data object.. there are a number of methods that allow users to work on the created object. Most methods only enable users to retrieve various elements of the calendar such as the year.. month.. day.. hour.. minute.. second.. and millisecond. These factors can be obtained by using local time.. UTC.. or GMT.</p><h3>Syntax</h3> <p><strong><code>dateObj.toISOString();</code></strong></p> <h3>Example</h3> <p><strong><code>document.write('Current Date: '+dateObj.toISOString());</code></strong><br> <a name='41'></a></p>"
" Proxy()"," <p>A Proxy object covers a single or many other objects and blocks methods.. like writing properties. Proxies are utilized in many libraries and frameworks. A proxy is a unique object. It doesn’t hold its own properties. With a void handler.. it just sends operations to the destination. Many proxy methods can be used as internal methods. For example.. GET.. SET.. DELETE are some of the proxy’s internal methods that get triggers when respective events occur. The following is an example of a proxy to store user data.</p><h3>Example</h3> <p><strong><code>const proxyUser = new Proxy(user.. handler);</code></strong><br> <a name='42'></a></p>"
" Promise"," <p><span data-preserver-spaces='true'>A&nbsp;</span><em><span data-preserver-spaces='true'>promise</span></em><span data-preserver-spaces='true'> is a specific JavaScript object that combines the “building code” and the “utilizing code” collectively. In terms of the relationship: this is the “recommendation list”. The “building code” accepts whatever event it requires to deliver the promised outcome.. and the “promise” makes that outcome accessible to all of the recommended code when it’s available. It is like fulfilling the promise. This is one of the most important javascript codes. It is used in many event-driven software applications. It is also used to handle asynchronous operations. Following is the example of Promise.</span></p><h3>Example</h3> <p><strong><code>promise<br> then(function () {<br> console.log('Life is Beautiful');<br> })</code></strong><br> <a name='43'></a></p>"
" <span data-preserver-spaces='true'>Mixins</span>"," <p>Mixin is a style in which attributes are appended to objects without utilizing inheritance. It gives an alternative method of designing the application that isn’t explicitly included in chapters on design models. Mixins are a kind of object creation.. where element characteristics get merged into a composite object so that attributes of each mixin display characteristics of the composite object. The Javascript does not support multiple inheritances this is the reason why Mixin is used to add various properties to objects without using inheritance. The following example is showing the use of Mixin.</p><h3>Example</h3> <p><strong><code>let myMixin = {<br> sayHello() {<br> console.log(`Hi ${this.name}`);</code></strong><br> <a name='44'></a></p>"
" Autocorrection"," <p>The autocorrection is a really beneficial feature of Date objects. In this.. users can configure a range of values.. and it also auto-adjusts itself. For example.. if you want to increase the date “28 August 2020” by 2 days. It is “30 August” then you just have to add 2 days. The Date object will execute it properly. This function is often applied to receive the date after the assigned period.</p><h3>Example</h3> <p><strong><code>let date = new Date(2020.. 8.. 28);<br> date.setDate(date.getDate() + 2);</code></strong><br> <a name='45'></a></p>"
" unescape()"," <p>The unescape() function calculates a new string in which hexadecimal escape strings are substituted with the number that it describes. The escape series might be presented by a function like escape. Normally.. decodeURI or decodeURIComponent are used instead of unescape. This function was introduced in Javascript version 1.5 and it is mostly used to decode the encoded string. The escape function is used to create a string portable to send it using a network and in return.. users can use unscape() function to decode the original string. These functions are useful in preventing the Cross-Site Scripting (XSS) attack. This feature has been removed from the web standards but some browsers still support these functions.</p><h3>Example</h3> <p><strong><code>unescape('xyz123');</code></strong><br> <a name='46'></a></p>"
" Generate an array of numbers"," <p>The following script can be used to create an array. An <em>array</em> is a group of objects collected at adjacent memory locations. The following script is used to generate the array with numbers from 0 to 500.</p><h3>Example</h3> <p><strong><code>var numbersArray = [] .. max = 500;<br> for( var a=1; numbersArray.push(i++) &lt; max;); // numbers = [1..2..3 ... 500]</code></strong><br> <a name='47'></a></p>"
" Verify"," <p>The verify is one of the most widely used JS commands. It is used to verify that a given or an inserted argument is a number or not. The following script is used to verify the given argument.</p><h3>Example</h3> <p><strong><code>function isNum(a){<br> return !isNaN(parseFloat(a)) &amp;&amp; isFinite(a);<br> }</code></strong><br> <a name='48'></a></p>"
" Create a Cookie"," <p>The most simplistic approach to design a cookie is to select a string value to the document.cookie object. The following script is displaying how to generate a cookie:</p><h3>Example</h3> <p><strong><code>document.cookie = “key1 = value1; key2 = value2; expires = date”;</code></strong></p> <p>Here expires is an alternative. If users give this attribute with a confirmed date or time then the cookie will terminate at the given date or time and after that cookies’ content will not be available.<br> <a name='49'></a></p>"
" Shift()"," <p>The <strong><code>shift() method</code></strong> is related to the pop() method but the exception is that the Shift method operates at the commencement of the array. The shift() method accepts the first component off of the entered array and reverses it.</p><p><a name='50'></a></p"